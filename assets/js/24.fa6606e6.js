(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{415:function(a,e,t){"use strict";t.r(e);var n=t(54),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"serverless-aws-infrastructure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serverless-aws-infrastructure"}},[a._v("#")]),a._v(" Serverless AWS Infrastructure")]),a._v(" "),t("p",[t("strong",[a._v("Published:")]),a._v(" "),t("em",[a._v("04/09/2021")])]),a._v(" "),t("p",[a._v("In this blog we will be building a simple API on the cloud using "),t("a",{attrs:{href:"https://aws.amazon.com/api-gateway/",target:"_blank",rel:"noopener noreferrer"}},[a._v("AWS API Gateway"),t("OutboundLink")],1),a._v(" & "),t("a",{attrs:{href:"https://aws.amazon.com/lambda/",target:"_blank",rel:"noopener noreferrer"}},[a._v("AWS Lambda"),t("OutboundLink")],1),a._v(" that will display "),t("em",[a._v('"hello world"')]),a._v(" when called.")]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"creating-an-amazon-api-gateway"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-an-amazon-api-gateway"}},[a._v("#")]),a._v(" Creating an Amazon API Gateway")]),a._v(" "),t("p",[a._v("Knowing API requirements will lead you to decide what type of "),t("em",[a._v("API Type")]),a._v(" will be selected when creating an Amazon API Gateway. For this case a few example gateway types are referenced here... "),t("a",{attrs:{href:"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("HTTP API vs. REST API"),t("OutboundLink")],1),a._v(". In this case we will be selecting the "),t("strong",[a._v("HTTP-API")]),a._v(" for this example "),t("em",[a._v('"hello world"')]),a._v(" API. During the creation process, we first specify an API name and will be doing more configurations later after we finish our "),t("strong",[a._v("Lambda")]),a._v(" function.")]),a._v(" "),t("p",[t("img",{attrs:{src:"/2021/api-gateway_creation.png",alt:"AWS API Gateway Configuration"}})]),a._v(" "),t("h2",{attrs:{id:"aws-lambda-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aws-lambda-configuration"}},[a._v("#")]),a._v(" AWS Lambda Configuration")]),a._v(" "),t("p",[a._v("We first need to define our Lambda function "),t("em",[a._v("runtime")]),a._v("/"),t("em",[a._v("language")]),a._v(" as well as the function name. In this example I will be naming my Lambda "),t("code",[a._v("helloLambda")]),a._v(" using "),t("code",[a._v("Node.js 14.x")]),a._v(". Since Lamba functionality is all "),t("strong",[a._v("event-trigger")]),a._v(" based, we will specify the event whenever our "),t("em",[a._v("API Gateway")]),a._v(" route is called. In this case during the "),t("strong",[a._v("trigger")]),a._v(" configuration, I specify the previous gateway created "),t("code",[a._v("helloworld-api")]),a._v(" and set my default security for this case to "),t("em",[a._v("open")]),a._v(".")]),a._v(" "),t("p",[t("img",{attrs:{src:"/2021/lambda_creation.png",alt:"AWS Lambda Configuration"}})]),a._v(" "),t("p",[a._v("AWS provides a default "),t("code",[a._v("index.js")]),a._v(" Lambda will be placed under the bottom panel.")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("exports"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("handler")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("async")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("event")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TODO implement")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" response "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statusCode"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    body"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JSON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("stringify")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Hello from Lambda!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("This code will handle the "),t("strong",[a._v("event")]),a._v(" from the "),t("strong",[a._v("trigger")]),a._v(" we specified and return a response code of "),t("code",[a._v("200")]),a._v(" ("),t("em",[a._v("success")]),a._v(") followed by a message "),t("em",[a._v('"Hello from Lambda!"')]),a._v(" when called.")]),a._v(" "),t("h2",{attrs:{id:"amazon-api-gateway-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amazon-api-gateway-configuration"}},[a._v("#")]),a._v(" Amazon API Gateway Configuration")]),a._v(" "),t("p",[a._v("Now that we have a Lambda function that will trigger when our "),t("em",[a._v("API Gateway")]),a._v(" is called, we will be configuring it to a specified route to be called via "),t("em",[a._v("REST")]),a._v(" protocol. During our configuration we can specify a "),t("strong",[a._v("Route")]),a._v(", in this case a default route will be created when a "),t("em",[a._v("Gateway")]),a._v(" is created. We will configure an "),t("strong",[a._v("Integration")]),a._v(" to be under a "),t("em",[a._v("Lambda function")]),a._v(". During integration configuration we are required to specifiy the "),t("strong",[a._v("region")]),a._v(" & "),t("strong",[a._v("name of Lambda")]),a._v(". The last step is to test the final API out from the "),t("strong",[a._v("Invoke URL")]),a._v(" specified in the "),t("em",[a._v("API Gateway")]),a._v(" description.")]),a._v(" "),t("p",[t("img",{attrs:{src:"/2021/api-gateway_test.png",alt:"Final API Output"}})])])}),[],!1,null,null,null);e.default=s.exports}}]);