(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{411:function(e,t,n){"use strict";n.r(t);var a=n(54),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"learning-the-basics-aws"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#learning-the-basics-aws"}},[e._v("#")]),e._v(" Learning the Basics (AWS)")]),e._v(" "),n("p",[n("strong",[e._v("Published:")]),e._v(" "),n("em",[e._v("11/13/2020")])]),e._v(" "),n("p",[e._v("This week I worked on "),n("em",[e._v("Amazon-Web-Services")]),e._v(" ("),n("strong",[e._v("AWS")]),e._v(") and was able to spin up a classic web-server hosted on the cloud. I learned a lot about the different services and architecture "),n("strong",[e._v("Amazon")]),e._v(" uses to serve many use cases of the client.")]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"vpc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vpc"}},[e._v("#")]),e._v(" VPC")]),e._v(" "),n("p",[e._v("Amazon provides a "),n("em",[e._v("Virtual Private Cloud")]),e._v(" ("),n("strong",[e._v("VPC")]),e._v(") to help manage a virtual network for all the different services/needs of the user. I was able to spin my VPC up with ease and managed my different resources that naturally goes along with a standard network. I configured a "),n("strong",[e._v("Subnet")]),e._v(" to be used within my VPC that will follow a "),n("strong",[e._v("CIDR")]),e._v(" block of "),n("code",[e._v("0.0.0.0/24")]),e._v(". From my configured subnet I split my network even more by allowing host connections within the "),n("code",[e._v("0.0.0.0/28")]),e._v(" range. After working with Subnet configuration, I needed an entry-point in which my web-server is able to communicate with the outside world and I attached an "),n("strong",[e._v("Internet Gateway")]),e._v(" onto my VPC to allow it to communicate outside the private cloud infrastructure.")]),e._v(" "),n("p",[n("img",{attrs:{src:"/2020/aws_layers.png",alt:"aws architecture layers"}})]),e._v(" "),n("h2",{attrs:{id:"security-groups"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#security-groups"}},[e._v("#")]),e._v(" Security Groups")]),e._v(" "),n("p",[e._v("The next step I took was whitelisting the services I wanted to communicate to my "),n("strong",[e._v("EC2")]),e._v(" instance hosting my web-server. I described two different protocols, I allowed "),n("code",[e._v("SSH")]),e._v(" & "),n("code",[e._v("HTTP")]),e._v(" to be specified within "),n("em",[e._v("only")]),e._v(" my IP so no one else but I will able to communicate with my "),n("strong",[e._v("AWS Resources")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"ec2-instance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ec2-instance"}},[e._v("#")]),e._v(" EC2 Instance")]),e._v(" "),n("p",[e._v("Now that I have specified the proper "),n("em",[e._v("network")]),e._v(" to connect to, I needed a way to host my web-server onto AWS. I used an "),n("strong",[e._v("EC2")]),e._v(" instance which is a "),n("em",[e._v("containerized")]),e._v(" platform to host a standard linux enviornment where I will be able to "),n("code",[e._v("SSH")]),e._v(" into the machine to run standard commands to spin up "),n("code",[e._v("Apache2")]),e._v(". In this case I installed "),n("code",[e._v("Ubuntu 18.04")]),e._v(" and Apache2. The actual set-up process follows this chain of specifying an "),n("em",[e._v("Amazon Machine Image")]),e._v(" ("),n("strong",[e._v("AMI")]),e._v(") to run on the machine, Select the machine resources needed (in my case a t2.micro), then attaching all the proper settings (network, subnet, security group). After installing the EC2 instance I was given a "),n("strong",[e._v("KeyPair")]),e._v(" which is a encrypted file that will allow me to "),n("strong",[e._v("Authenticate & Authorize")]),e._v(" the connection needed to connect to the machine via SSH. It was also important to only give "),n("strong",[e._v("READ-Access")]),e._v(" "),n("em",[e._v("ONLY")]),e._v(" to the file so the instance will accept my connection.")]),e._v(" "),n("h2",{attrs:{id:"network-interface-elastic-ip-s"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#network-interface-elastic-ip-s"}},[e._v("#")]),e._v(" Network Interface & Elastic IP's")]),e._v(" "),n("p",[e._v("The final steps I needed were to attach a "),n("strong",[e._v("Network Interface")]),e._v(" to my "),n("strong",[e._v("EC2")]),e._v(" instance so it will be able to communicate to my "),n("strong",[e._v("VPC")]),e._v(" on the "),n("strong",[e._v("AWS")]),e._v(" region. I assigned the "),n("strong",[e._v("Subnet")]),e._v(" I creted to the Network Interface, Attached a Security Group, and finally Associated my newly created Network Interface to my EC2 instance. Now that I have all the connections sorted out properly, I created an "),n("strong",[e._v("Elastic IP")]),e._v(" which is used to be able to connect on the "),n("em",[e._v("public internet")]),e._v(" and associated it with my Network Interface. Viola, I now have a running web-server hosted on AWS.")]),e._v(" "),n("p",[e._v("Learn more about AWS services at the following link: "),n("a",{attrs:{href:"https://docs.aws.amazon.com/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("AWS Documentation"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=o.exports}}]);